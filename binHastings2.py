import scipy.misc as _sm
import scipy.stats as _ss
import kdist as _kd
import kstat as _ks
import warnings as _w
import logerfc_ as _lfc
#  Given data generated by binomial distribution with parameter
#  (p, n), fit this, and try to find (p, n)

def Llklhd(ks, n, p):
    return _N.sum(_N.log(_sm.comb(n, ks)) + ks*_N.log(p) + (n-ks)*_N.log(1 - p))

def trPoi(lmd, a, b):
    """
    a, b inclusive
    """
    ct = a - 1
    while (ct < a) or (ct > b):
        ct = _ss.poisson.rvs(lmd)
    return ct

_w.filterwarnings("error")
######
burn = 200
NMC  = 200
pT = 0.03
nT = 100
N  = 5000

pMin=0.001
pMax=0.99

cts = _N.random.binomial(nT, pT, size=N)
Mk  = _N.mean(cts)
iMk100 = int(100*Mk)
sdk = _N.std(cts)
cv = ((sdk*sdk) / Mk)
nmin= max(cts)

stdp = 0.01
stdp2= stdp**2

if lfc == None:
    lfc = _lfc.logerfc()

u    = 0.4
NMZ  = _N.exp(lfc.trncNrmNrmlz(pMin, pMax, u, stdp))
xs   = _N.linspace(pMin, pMax, 200)
qFs  = _N.exp(-0.5*(xs-u)**2 / (stdp2)) / NMZ

#p0   = pMin + (pMax-pMin)*_N.random.rand()
#n0   = int(iMk100 * _N.random.rand())
p0    = (1 - cv)*5
n0    = int(Mk/p0)

ns   = _N.empty(burn + NMC)
ps   = _N.empty(burn + NMC)

rds  = _N.random.rand(burn+NMC)
for it in xrange(burn + NMC):
    #############  n jump
    lmd= Mk/p0
    rv = _ss.poisson(lmd)

    #  proposal distribution is Poisson with mean (p0/Mk), truncated to a,b
    n1 = trPoi(lmd, a=nmin, b=iMk100)   #  mean is p0/Mk
    #  based on n1, we pick
    pu = Mk/n1
    p1  = pu + stdp*_ss.truncnorm.rvs(pMin, pMax)

    lF = Llklhd(cts, n1, p1)
    qF = rv.pmf(n1) * _N.exp(-0.5*(p1-pu)**2 / stdp2)
    lB = Llklhd(cts, n0, p0)
    qB = rv.pmf(n0) * _N.exp(-0.5*(p0-pu)**2 / stdp2)

    if lF - lB > 100:    #  pretty much always move
        posRat = 1e+50
    else:
        posRat = _N.exp(lF-lB)

    if (qB == 0) and (qF == 0):
        prRat  = 1
    elif (qF == 0):
        prRat  = 1e+10
    else:
        prRat = qB/qF

    aln  = min(1, posRat*prRat)

    if rds[it] < aln:
        p0 = p1
        n0 = n1
    ps[it] = p0
    ns[it] = n0
