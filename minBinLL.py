import scipy.optimize as _sco
#  Given data generated by binomial distribution with parameter
#  (p, n), fit this, and try to find (p, n)

def Llklhd(x, *args):
    n = x[0]
    p = x[1]
    ks = args[0]

    return -1*_N.sum(_N.log(_sm.comb(n, ks)) + ks*_N.log(p) + (n-ks)*_N.log(1 - p))


pT = 0.05
nT = 100
N  = 1000

pMin=0.001
pMax=0.99

cts = _N.random.binomial(nT, pT, size=N)
Mk  = _N.mean(cts)
iMk100 = int(100*Mk)
sdk = _N.std(cts)
print ((sdk*sdk) / Mk)
nmin= max(cts)

xi  = _N.array([10, 0.1])
bds = _N.array([[nmin, iMk100], [pMin, pMax]])
sol = _sco.minimize(Llklhd, xi, args=(cts, ), bounds=bds)



